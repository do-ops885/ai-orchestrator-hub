[
  {
    "test": "initialize",
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "capabilities": {
          "logging": {},
          "prompts": {},
          "resources": {},
          "tools": {}
        },
        "protocolVersion": "2024-11-05",
        "serverInfo": {
          "description": "Multiagent Hive System MCP Server - Swarm intelligence for any MCP client",
          "name": "multiagent-hive-mcp",
          "version": "1.0.0"
        }
      }
    }
  },
  {
    "test": "list_tools",
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 2,
      "result": {
        "tools": [
          {
            "description": "Create a new agent in the swarm with specified type and capabilities",
            "inputSchema": {
              "anyOf": [
                {
                  "required": [
                    "type"
                  ]
                },
                {
                  "required": [
                    "agent_type"
                  ]
                }
              ],
              "properties": {
                "agent_type": {
                  "description": "Type of agent to create (alias: type)",
                  "enum": [
                    "worker",
                    "coordinator",
                    "specialist",
                    "learner"
                  ],
                  "type": "string"
                },
                "specialization": {
                  "description": "Specialization for Specialist agents",
                  "type": "string"
                },
                "type": {
                  "description": "Type of agent to create (alias: agent_type)",
                  "enum": [
                    "worker",
                    "coordinator",
                    "specialist",
                    "learner"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "name": "create_swarm_agent"
          },
          {
            "description": "Get system information including platform, architecture, and CPU count",
            "inputSchema": {
              "properties": {},
              "required": [],
              "type": "object"
            },
            "name": "system_info"
          },
          {
            "description": "Create complex multi-step workflows with agent dependencies and parallel execution",
            "inputSchema": {
              "properties": {
                "dependencies": {
                  "description": "Global workflow dependencies",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Name of the workflow",
                  "type": "string"
                },
                "parallel_execution": {
                  "default": false,
                  "description": "Whether steps can run in parallel",
                  "type": "boolean"
                },
                "steps": {
                  "description": "Array of workflow steps",
                  "items": {
                    "properties": {
                      "agent_type": {
                        "enum": [
                          "worker",
                          "coordinator",
                          "specialist",
                          "learner"
                        ],
                        "type": "string"
                      },
                      "depends_on": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "description": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "type": {
                  "description": "Type of workflow to create",
                  "enum": [
                    "code_review",
                    "testing",
                    "security_audit",
                    "performance_optimization",
                    "documentation"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "name",
                "type",
                "steps"
              ],
              "type": "object"
            },
            "name": "create_specialized_workflow"
          },
          {
            "description": "Get detailed information about a specific task",
            "inputSchema": {
              "properties": {
                "task_id": {
                  "description": "Unique identifier of the task",
                  "type": "string"
                }
              },
              "required": [
                "task_id"
              ],
              "type": "object"
            },
            "name": "get_task_details"
          },
          {
            "description": "Analyze text using the hive's NLP capabilities",
            "inputSchema": {
              "properties": {
                "text": {
                  "description": "Text to analyze with NLP",
                  "type": "string"
                }
              },
              "required": [
                "text"
              ],
              "type": "object"
            },
            "name": "analyze_with_nlp"
          },
          {
            "description": "Assign a new task to the swarm with specified priority",
            "inputSchema": {
              "properties": {
                "description": {
                  "description": "Description of the task to assign",
                  "type": "string"
                },
                "priority": {
                  "description": "Priority level of the task",
                  "enum": [
                    "Low",
                    "Medium",
                    "High",
                    "Critical"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "description",
                "priority"
              ],
              "type": "object"
            },
            "name": "assign_swarm_task"
          },
          {
            "description": "Create multiple agents in a single batch operation",
            "inputSchema": {
              "anyOf": [
                {
                  "required": [
                    "type"
                  ]
                },
                {
                  "required": [
                    "agent_type"
                  ]
                }
              ],
              "properties": {
                "agent_type": {
                  "description": "Type of agents to create (alias: type)",
                  "enum": [
                    "worker",
                    "coordinator",
                    "specialist",
                    "learner"
                  ],
                  "type": "string"
                },
                "count": {
                  "description": "Number of agents to create (max 10)",
                  "maximum": 10,
                  "minimum": 1,
                  "type": "integer"
                },
                "type": {
                  "description": "Type of agents to create (alias: agent_type)",
                  "enum": [
                    "worker",
                    "coordinator",
                    "specialist",
                    "learner"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "count"
              ],
              "type": "object"
            },
            "name": "batch_create_agents"
          },
          {
            "description": "List all agents in the swarm with optional filtering",
            "inputSchema": {
              "properties": {
                "active_only": {
                  "default": false,
                  "description": "Show only active agents",
                  "type": "boolean"
                },
                "agent_type": {
                  "description": "Filter by agent type",
                  "enum": [
                    "worker",
                    "coordinator",
                    "specialist",
                    "learner"
                  ],
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "name": "list_agents"
          },
          {
            "description": "Dynamically scale swarm size based on workload with intelligent auto-scaling and load prediction",
            "inputSchema": {
              "properties": {
                "action": {
                  "description": "Scaling action to perform",
                  "enum": [
                    "scale_up",
                    "scale_down",
                    "auto_scale",
                    "analyze_needs"
                  ],
                  "type": "string"
                },
                "agent_type": {
                  "default": "worker",
                  "description": "Type of agents to create when scaling up",
                  "enum": [
                    "worker",
                    "coordinator",
                    "specialist",
                    "learner"
                  ],
                  "type": "string"
                },
                "count": {
                  "description": "Number of agents to scale up/down (max 10 for scale_up)",
                  "maximum": 10,
                  "minimum": 1,
                  "type": "integer"
                },
                "criteria": {
                  "description": "Custom scaling criteria for auto_scale",
                  "properties": {
                    "max_utilization": {
                      "default": 80,
                      "type": "number"
                    },
                    "min_utilization": {
                      "default": 20,
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "action"
              ],
              "type": "object"
            },
            "name": "dynamic_swarm_scaling"
          },
          {
            "description": "Enable direct agent-to-agent communication with channels, broadcasting, and message history",
            "inputSchema": {
              "properties": {
                "action": {
                  "description": "Communication action to perform",
                  "enum": [
                    "send_message",
                    "broadcast",
                    "create_channel",
                    "list_channels",
                    "get_messages"
                  ],
                  "type": "string"
                },
                "channel": {
                  "default": "general",
                  "description": "Channel name for broadcast or message retrieval",
                  "type": "string"
                },
                "channel_name": {
                  "description": "Name for new channel (required for create_channel)",
                  "type": "string"
                },
                "channel_type": {
                  "default": "public",
                  "description": "Type of channel to create",
                  "enum": [
                    "public",
                    "private",
                    "system"
                  ],
                  "type": "string"
                },
                "description": {
                  "description": "Channel description (optional for create_channel)",
                  "type": "string"
                },
                "from_agent": {
                  "description": "Agent ID sending the message (required for send_message, broadcast)",
                  "type": "string"
                },
                "limit": {
                  "default": 10,
                  "description": "Number of messages to retrieve (for get_messages)",
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer"
                },
                "message": {
                  "description": "Message content (required for send_message, broadcast)",
                  "type": "string"
                },
                "message_type": {
                  "default": "info",
                  "description": "Type of message",
                  "enum": [
                    "info",
                    "warning",
                    "error",
                    "success",
                    "task",
                    "coordination"
                  ],
                  "type": "string"
                },
                "to_agent": {
                  "description": "Agent ID receiving the message (required for send_message)",
                  "type": "string"
                }
              },
              "required": [
                "action"
              ],
              "type": "object"
            },
            "name": "cross_agent_communication"
          },
          {
            "description": "Get detailed information about a specific agent",
            "inputSchema": {
              "properties": {
                "agent_id": {
                  "description": "Unique identifier of the agent",
                  "type": "string"
                }
              },
              "required": [
                "agent_id"
              ],
              "type": "object"
            },
            "name": "get_agent_details"
          },
          {
            "description": "List all tasks in the swarm with optional filtering",
            "inputSchema": {
              "properties": {
                "priority": {
                  "description": "Filter by task priority",
                  "enum": [
                    "Low",
                    "Medium",
                    "High",
                    "Critical"
                  ],
                  "type": "string"
                },
                "status": {
                  "description": "Filter by task status",
                  "enum": [
                    "Pending",
                    "Running",
                    "Completed",
                    "Failed"
                  ],
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "name": "list_tasks"
          },
          {
            "description": "Share learnings between agents with knowledge storage, experience sharing, and intelligent insights",
            "inputSchema": {
              "properties": {
                "action": {
                  "description": "Knowledge sharing action to perform",
                  "enum": [
                    "store_knowledge",
                    "retrieve_knowledge",
                    "share_experience",
                    "get_insights",
                    "knowledge_graph"
                  ],
                  "type": "string"
                },
                "agent_id": {
                  "description": "Agent storing knowledge (required for store_knowledge)",
                  "type": "string"
                },
                "confidence": {
                  "default": 0.8,
                  "description": "Confidence level in the knowledge",
                  "maximum": 1,
                  "minimum": 0,
                  "type": "number"
                },
                "content": {
                  "description": "Knowledge content (required for store_knowledge)",
                  "type": "string"
                },
                "description": {
                  "description": "Experience description (required for share_experience)",
                  "type": "string"
                },
                "experience_type": {
                  "description": "Type of experience being shared",
                  "enum": [
                    "success_pattern",
                    "failure_analysis",
                    "optimization_tip",
                    "lesson_learned"
                  ],
                  "type": "string"
                },
                "focus": {
                  "default": "all",
                  "description": "Focus area for knowledge graph",
                  "type": "string"
                },
                "from_agent": {
                  "description": "Agent sharing experience (required for share_experience)",
                  "type": "string"
                },
                "impact": {
                  "default": "medium",
                  "description": "Impact level of the experience",
                  "enum": [
                    "low",
                    "medium",
                    "high",
                    "critical"
                  ],
                  "type": "string"
                },
                "insight_type": {
                  "default": "trending",
                  "description": "Type of insights to generate",
                  "enum": [
                    "trending",
                    "patterns",
                    "anomalies",
                    "predictions"
                  ],
                  "type": "string"
                },
                "knowledge_type": {
                  "description": "Type of knowledge (required for store_knowledge, optional filter for retrieve_knowledge)",
                  "enum": [
                    "best_practice",
                    "technical_solution",
                    "performance_data",
                    "error_pattern",
                    "optimization"
                  ],
                  "type": "string"
                },
                "limit": {
                  "default": 5,
                  "description": "Number of results to return",
                  "maximum": 20,
                  "minimum": 1,
                  "type": "integer"
                },
                "query": {
                  "description": "Search query (required for retrieve_knowledge)",
                  "type": "string"
                },
                "tags": {
                  "description": "Tags for knowledge categorization",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "time_range": {
                  "default": "24h",
                  "description": "Time range for analysis",
                  "enum": [
                    "1h",
                    "6h",
                    "24h",
                    "7d",
                    "30d"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "action"
              ],
              "type": "object"
            },
            "name": "knowledge_sharing"
          },
          {
            "description": "Get the current status of the multiagent hive system",
            "inputSchema": {
              "properties": {},
              "required": [],
              "type": "object"
            },
            "name": "get_swarm_status"
          },
          {
            "description": "Echo a message back with timestamp",
            "inputSchema": {
              "properties": {
                "message": {
                  "description": "Message to echo back",
                  "type": "string"
                }
              },
              "required": [
                "message"
              ],
              "type": "object"
            },
            "name": "echo"
          },
          {
            "description": "Analyze agent performance with deep insights, bottleneck detection, and optimization recommendations",
            "inputSchema": {
              "properties": {
                "agent_filter": {
                  "description": "Filter analysis by agent type (optional)",
                  "type": "string"
                },
                "analysis_type": {
                  "default": "comprehensive",
                  "description": "Type of performance analysis to run",
                  "enum": [
                    "comprehensive",
                    "efficiency",
                    "bottlenecks",
                    "recommendations"
                  ],
                  "type": "string"
                },
                "time_range": {
                  "default": "24h",
                  "description": "Time range for analysis",
                  "enum": [
                    "1h",
                    "6h",
                    "24h",
                    "7d",
                    "30d"
                  ],
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "name": "agent_performance_analytics"
          },
          {
            "description": "Coordinate agents in the swarm using specified strategy",
            "inputSchema": {
              "properties": {
                "strategy": {
                  "description": "Coordination strategy to use",
                  "enum": [
                    "default",
                    "aggressive",
                    "conservative",
                    "balanced"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "strategy"
              ],
              "type": "object"
            },
            "name": "coordinate_agents"
          }
        ]
      }
    }
  },
  {
    "test": "system_info",
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 3,
      "result": {
        "content": [
          {
            "text": "{\"architecture\":\"x86_64\",\"cpu_count\":4,\"hostname\":\"codespaces-601c95\",\"platform\":\"linux\",\"timestamp\":\"2025-09-20T11:54:33.257690222+00:00\"}",
            "type": "text"
          }
        ]
      }
    }
  },
  {
    "test": "create_agent",
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 4,
      "result": {
        "content": [
          {
            "text": "{\"agent_id\":\"388385ba-af4e-40a8-99e4-0faeb71358c5\",\"message\":\"Created worker agent with ID: 388385ba-af4e-40a8-99e4-0faeb71358c5\",\"success\":true}",
            "type": "text"
          }
        ]
      }
    },
    "agent_id": "388385ba-af4e-40a8-99e4-0faeb71358c5"
  },
  {
    "test": "assign_task",
    "success": false,
    "response": {
      "jsonrpc": "2.0",
      "id": 5,
      "error": {
        "code": -32603,
        "message": "Tool execution failed: Invalid input: type - Task type is required",
        "data": {
          "error": "Invalid input: type - Task type is required",
          "tool": "assign_swarm_task"
        }
      }
    }
  },
  {
    "test": "nlp_analysis",
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 6,
      "result": {
        "content": [
          {
            "text": "{\"analysis\":{\"keywords\":[\"The\",\"multiagent\",\"hive\",\"system\",\"provides\"],\"length\":147,\"sentiment\":\"neutral\",\"word_count\":18},\"text\":\"The multiagent hive system provides intelligent swarm coordination for complex distributed computing tasks with advanced neural network processing.\",\"timestamp\":\"2025-09-20T11:54:33.272317426+00:00\"}",
            "type": "text"
          }
        ]
      }
    }
  },
  {
    "test": "swarm_status",
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 7,
      "result": {
        "content": [
          {
            "text": "{\"agents\":{\"active_agents\":0,\"agent_types\":{},\"performance\":{\"active_agents\":0,\"average_execution_time_ms\":0.0,\"success_rate\":0.0,\"successful_tasks\":0,\"total_tasks\":0},\"total_agents\":0},\"hive_id\":\"c3ed87da-caad-424b-bdc2-009c4cec68e6\",\"metrics\":{\"agent_metrics\":{\"active_agents\":0,\"agents_created_today\":0,\"agents_removed_today\":0,\"average_agent_performance\":0.0,\"top_performer_id\":null,\"total_agents\":0},\"last_updated\":\"1970-01-01T00:00:00Z\",\"resource_metrics\":{\"available_cpu_cores\":0,\"disk_usage_percent\":0.0,\"memory_available_mb\":0.0,\"memory_total_mb\":0.0,\"network_connections\":0},\"system_metrics\":{\"cpu_usage_percent\":0.0,\"error_rate\":0.0,\"network_throughput_mbps\":0.0,\"response_time_ms\":0.0,\"total_memory_usage_mb\":0.0,\"uptime_seconds\":0},\"task_metrics\":{\"average_execution_time_ms\":0.0,\"completed_tasks\":0,\"failed_tasks\":0,\"pending_tasks\":0,\"success_rate\":0.0,\"tasks_per_hour\":0.0,\"total_tasks\":0}},\"resources\":{\"hardware_class\":\"Desktop\",\"resource_profile\":{\"batch_size\":4,\"max_agents\":20,\"neural_complexity\":0.7,\"profile_name\":\"Desktop Balanced\",\"update_frequency\":5000},\"system_resources\":{\"available_memory\":8000000000,\"cpu_cores\":4,\"cpu_usage\":0.0,\"last_updated\":\"2025-09-20T11:54:33.276304849Z\",\"memory_usage\":0.0,\"simd_capabilities\":[\"SSE4.1\",\"AVX2\"]}},\"swarm_center\":[6.99,0.02699],\"tasks\":{\"executor\":{\"active_executions\":0,\"average_execution_time_ms\":0.0,\"execution_timeout_ms\":300000,\"healthy\":false,\"max_concurrent\":100,\"success_rate\":0.0,\"throughput\":0.0,\"total_executed\":0},\"metrics\":{\"average_execution_time_ms\":0.0,\"current_queue_size\":0,\"history_size\":0,\"success_rate\":0.0,\"throughput\":0.0,\"total_tasks\":0,\"tracked_tasks\":0},\"queue\":{\"health\":{\"capacity\":10000,\"current_size\":0,\"peak_size\":0,\"status\":\"healthy\",\"utilization_percentage\":0.0,\"work_stealing_enabled\":true},\"legacy_queue_size\":0,\"stats\":{\"assigned_tasks\":0,\"completed_tasks\":0,\"failed_tasks\":0,\"peak_queue_size\":0,\"pending_tasks\":0,\"retrying_tasks\":0,\"running_tasks\":0,\"total_capacity\":0,\"utilization_percentage\":0.0}},\"system\":{\"healthy\":false,\"max_concurrent_tasks\":100,\"max_queue_size\":10000,\"work_stealing_enabled\":true},\"timestamp\":\"2025-09-20T11:54:33.276879332Z\"},\"timestamp\":\"2025-09-20T11:54:33.276960924Z\",\"total_energy\":0.0}",
            "type": "text"
          }
        ]
      }
    }
  },
  {
    "test": "create_specialized_workflow",
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 8,
      "result": {
        "content": [
          {
            "text": "{\"created_agents\":[{\"agent_id\":\"00fd27a2-945e-4a9f-8151-ad28de9667bf\",\"agent_type\":\"coordinator\",\"step_name\":\"setup\"},{\"agent_id\":\"5c8661db-7b55-4d6b-9f35-7b21c3d08a5f\",\"agent_type\":\"worker\",\"step_name\":\"execute\"},{\"agent_id\":\"71306dcf-9331-4ed7-a3a9-c326237eb334\",\"agent_type\":\"worker\",\"step_name\":\"cleanup\"}],\"message\":\"Created workflow 'MCP Test Workflow' with 3 steps and 3 agents\",\"parallel_execution\":false,\"success\":true,\"total_steps\":3,\"workflow_id\":\"workflow_b4176479\",\"workflow_name\":\"MCP Test Workflow\",\"workflow_type\":\"testing\"}",
            "type": "text"
          }
        ]
      }
    }
  },
  {
    "test": "agent_performance_analytics",
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 9,
      "result": {
        "content": [
          {
            "text": "{\"analysis_type\":\"comprehensive\",\"analytics\":{\"bottlenecks\":[{\"description\":\"Minimal resource conflicts detected\",\"severity\":\"low\",\"type\":\"resource_contention\"},{\"description\":\"Task queue growing during peak hours\",\"severity\":\"medium\",\"type\":\"task_queue\"}],\"overall_performance\":{\"active_agents\":0,\"agent_utilization\":\"0.0%\",\"efficiency_score\":0.0,\"throughput\":0.0,\"total_agents\":0},\"recommendations\":[\"Consider adding 2-3 more worker agents during peak hours\",\"Implement task prioritization for better throughput\",\"Monitor memory usage for optimal performance\"]},\"system_health\":\"optimal\",\"time_range\":\"1h\",\"timestamp\":\"2025-09-20T11:54:33.286186241+00:00\"}",
            "type": "text"
          }
        ]
      }
    }
  },
  {
    "test": "dynamic_swarm_scaling",
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 10,
      "result": {
        "content": [
          {
            "text": "{\"scaling_result\":{\"auto_scaling_analysis\":{\"action\":\"maintain\",\"current_utilization\":\"0.0%\",\"reason\":\"Optimal utilization\"},\"current_metrics\":{\"active_agents\":0,\"total_agents\":0,\"utilization\":\"0.0%\"}},\"timestamp\":\"2025-09-20T11:54:33.290764238+00:00\"}",
            "type": "text"
          }
        ]
      }
    }
  },
  {
    "test": "cross_agent_communication",
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 11,
      "result": {
        "content": [
          {
            "text": "{\"action\":\"broadcast\",\"result\":{\"broadcast_id\":\"broadcast_c7856b32\",\"channel\":\"test\",\"from_agent\":\"test_coordinator\",\"message\":\"MCP comprehensive test in progress\",\"recipients\":0,\"status\":\"broadcasted\",\"timestamp\":\"2025-09-20T11:54:33.295152209+00:00\"},\"timestamp\":\"2025-09-20T11:54:33.295156897+00:00\"}",
            "type": "text"
          }
        ]
      }
    }
  },
  {
    "test": "knowledge_sharing",
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 12,
      "result": {
        "content": [
          {
            "text": "{\"action\":\"get_insights\",\"result\":{\"insight_type\":\"trending\",\"insights\":[{\"confidence\":0.92,\"impact\":\"high\",\"insight\":\"Peak activity occurs between 9-11 AM, consider preemptive scaling\",\"source_agents\":[\"coordinator_01\",\"worker_03\",\"worker_07\"],\"topic\":\"Task Distribution Patterns\"},{\"confidence\":0.85,\"impact\":\"medium\",\"insight\":\"Broadcast messages reduce individual messaging by 40%\",\"source_agents\":[\"specialist_02\"],\"topic\":\"Communication Efficiency\"},{\"confidence\":0.78,\"impact\":\"high\",\"insight\":\"Retry with exponential backoff reduces failure rate by 60%\",\"source_agents\":[\"recovery_agent_01\"],\"topic\":\"Error Recovery\"}],\"recommendations\":[\"Implement predictive scaling based on time patterns\",\"Increase use of broadcast for system-wide updates\",\"Apply retry patterns to all agent communications\"],\"time_range\":\"1h\"},\"timestamp\":\"2025-09-20T11:54:33.299538204+00:00\"}",
            "type": "text"
          }
        ]
      }
    }
  }
]