name: Lint and Format Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Security and dependency scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, rust
          config-file: ./.github/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Dependency review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        with:
          config-file: './.github/dependency-review-config.yml'

      - name: Secrets detection
        run: |
          echo "🔍 Running secrets detection..."

          # Install gitleaks if not present
          if ! command -v gitleaks &> /dev/null; then
            echo "📦 Installing gitleaks..."
            wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_8.18.0_linux_x64.tar.gz
            tar -xzf gitleaks.tar.gz
            chmod +x gitleaks
            sudo mv gitleaks /usr/local/bin/
          fi

          # Run gitleaks
          echo "🔎 Scanning for secrets..."
          gitleaks detect --source . --report-format json --report-path gitleaks-report.json --verbose || true

          if [ -f gitleaks-report.json ]; then
            secrets_count=$(jq length gitleaks-report.json)
            echo "✅ Secrets detection completed. Found: $secrets_count potential secrets"

            if [ $secrets_count -gt 0 ]; then
              echo "⚠️  Potential secrets detected. Please review gitleaks-report.json"
              echo "::warning::Potential secrets detected. Please review gitleaks-report.json"
            fi
          fi

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            gitleaks-report.json
          retention-days: 30

  # Rust linting
  rust-lint:
    name: Rust Lint
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-lint-
            ${{ runner.os }}-cargo-

      - name: Rust formatting check
        run: |
          echo "🔧 Checking Rust formatting..."
          cd backend

          if ! cargo fmt --check; then
            echo "❌ Rust formatting issues detected"
            cargo fmt --check --verbose
            exit 1
          else
            echo "✅ Rust formatting check passed"
          fi

      - name: Clippy linting
        run: |
          echo "🔍 Running Clippy analysis..."
          cd backend

          # Run clippy with comprehensive lints
          cargo clippy --all-targets --all-features -- \
            -D warnings \
            -D clippy::all \
            -D clippy::pedantic \
            -D clippy::nursery \
            -D clippy::cargo \
            -A clippy::missing_docs_in_private_items \
            -A clippy::module_name_repetitions \
            --message-format json > ../clippy-report.json || true

          # Parse clippy results
          if [ -f ../clippy-report.json ]; then
            warnings_count=$(jq '[.[] | select(.reason == "compiler-message" and .message.level == "warning")] | length' ../clippy-report.json)
            errors_count=$(jq '[.[] | select(.reason == "compiler-message" and .message.level == "error")] | length' ../clippy-report.json)

            echo "✅ Clippy analysis completed. Warnings: $warnings_count, Errors: $errors_count"

            if [ $errors_count -gt 0 ]; then
              echo "❌ Clippy errors detected: $errors_count"
              exit 1
            fi
          fi

      - name: Performance-focused linting
        run: |
          echo "⚡ Running performance-focused linting..."
          cd backend

          # Check for performance anti-patterns
          cargo clippy --all-targets --all-features -- \
            -W clippy::inefficient_to_string \
            -W clippy::large_enum_variant \
            -W clippy::large_stack_arrays \
            -W clippy::redundant_clone \
            -W clippy::unnecessary_wraps \
            --message-format json > ../performance-lint.json || true

          if [ -f ../performance-lint.json ]; then
            perf_issues=$(jq '[.[] | select(.reason == "compiler-message")] | length' ../performance-lint.json)
            echo "✅ Performance linting completed. Issues: $perf_issues"
          fi

      - name: Documentation linting
        run: |
          echo "📚 Running documentation linting..."
          cd backend

          # Check for missing documentation
          cargo doc --no-deps --document-private-items 2>&1 | \
          while IFS= read -r line; do
            if echo "$line" | grep -q "warning.*missing documentation"; then
              echo "⚠️  Missing documentation: $line"
            fi
          done

          # Check for broken doc links
          cargo doc --no-deps 2>&1 | \
          while IFS= read -r line; do
            if echo "$line" | grep -q "warning.*unresolved link"; then
              echo "⚠️  Broken documentation link: $line"
            fi
          done

      - name: Upload Rust lint results
        uses: actions/upload-artifact@v4
        with:
          name: rust-lint-results
          path: |
            clippy-report.json
            performance-lint.json
          retention-days: 30

  # Frontend linting
  frontend-lint:
    name: Frontend Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          echo "📦 Installing frontend dependencies..."
          cd frontend
          npm ci

      - name: ESLint analysis
        run: |
          echo "🔍 Running ESLint analysis..."
          cd frontend

          # Run ESLint with comprehensive rules
          npx eslint . --ext .ts,.tsx,.js,.jsx \
            --format json \
            --output-file ../eslint-report.json || true

          # Parse ESLint results
          if [ -f ../eslint-report.json ]; then
            total_issues=$(jq '[.[] | .messages[]] | length' ../eslint-report.json)
            error_count=$(jq '[.[] | .messages[] | select(.severity == 2)] | length' ../eslint-report.json)
            warning_count=$(jq '[.[] | .messages[] | select(.severity == 1)] | length' ../eslint-report.json)

            echo "✅ ESLint analysis completed. Total issues: $total_issues, Errors: $error_count, Warnings: $warning_count"

            if [ $error_count -gt 0 ]; then
              echo "❌ ESLint errors detected: $error_count"
              exit 1
            fi
          fi

      - name: TypeScript strict checking
        run: |
          echo "🔧 Running TypeScript strict checking..."
          cd frontend

          # Run TypeScript compiler with strict settings
          npx tsc --noEmit --strict --exactOptionalPropertyTypes

      - name: Prettier formatting check
        run: |
          echo "💅 Running Prettier formatting check..."
          cd frontend

          # Check formatting
          if ! npx prettier --check .; then
            echo "❌ Prettier formatting issues detected"
            exit 1
          else
            echo "✅ Prettier formatting check passed"
          fi

      - name: Upload frontend lint results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-lint-results
          path: |
            eslint-report.json
          retention-days: 30

  # Documentation linting
  documentation-lint:
    name: Documentation Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup documentation tools
        run: |
          echo "📚 Setting up documentation tools..."

          # Install markdown linting tools
          npm install -g markdownlint-cli
          npm install -g markdown-link-check

      - name: Markdown linting
        run: |
          echo "📝 Running markdown linting..."

          # Create markdownlint config
          cat > .markdownlint.json << 'EOF'
          {
            "MD013": { "line_length": 120 },
            "MD033": false,
            "MD041": false
          }
          EOF

          # Run markdownlint
          markdownlint --config .markdownlint.json --json *.md **/*.md > markdown-lint.json || true

          if [ -f markdown-lint.json ]; then
            issues_count=$(jq length markdown-lint.json)
            echo "✅ Markdown linting completed. Issues: $issues_count"

            if [ $issues_count -gt 0 ]; then
              echo "⚠️  Markdown linting issues detected: $issues_count"
            fi
          fi

      - name: Link checking
        run: |
          echo "🔗 Checking markdown links..."

          # Check links in all markdown files
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | \
          while IFS= read -r file; do
            echo "🔍 Checking links in: $file"
            markdown-link-check "$file" --config .github/markdown-link-check.json || true
          done

      - name: API documentation validation
        run: |
          echo "🔍 Validating API documentation..."

          # Check if API documentation exists and is up to date
          if [ -f "backend/docs/api.md" ]; then
            # Simple check for API doc completeness
            endpoints_in_code=$(grep -r "route\|endpoint\|api" backend/src/ | wc -l)
            endpoints_in_docs=$(grep -c "##\|###" backend/docs/api.md)

            echo "✅ API documentation analysis: $endpoints_in_code endpoints in code, $endpoints_in_docs in docs"

            # Simple heuristic: docs should have at least 50% of code references
            if [ $endpoints_in_docs -lt $((endpoints_in_code / 2)) ]; then
              echo "⚠️  API documentation may be incomplete"
            fi
          else
            echo "⚠️  API documentation not found"
          fi

      - name: Upload documentation lint results
        uses: actions/upload-artifact@v4
        with:
          name: documentation-lint-results
          path: |
            markdown-lint.json
          retention-days: 30

  # Lint summary
  lint-summary:
    name: Lint Summary
    runs-on: ubuntu-latest
    needs: [security-scan, rust-lint, frontend-lint, documentation-lint]
    if: always()
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download lint results
        uses: actions/download-artifact@v4
        with:
          pattern: "*-lint-results"
          path: lint-results
        continue-on-error: true

      - name: Generate lint summary
        run: |
          echo "📊 Generating lint summary..."

          # Initialize counters
          total_issues=0
          total_errors=0

          # Process Rust lint results
          rust_issues=0
          rust_errors=0
          if [ -f "lint-results/clippy-report.json" ]; then
            rust_issues=$(jq '[.[] | select(.reason == "compiler-message")] | length' lint-results/clippy-report.json)
            rust_errors=$(jq '[.[] | select(.reason == "compiler-message" and .message.level == "error")] | length' lint-results/clippy-report.json)
          fi

          # Process frontend lint results
          frontend_issues=0
          frontend_errors=0
          if [ -f "lint-results/eslint-report.json" ]; then
            frontend_issues=$(jq '[.[] | .messages[]] | length' lint-results/eslint-report.json)
            frontend_errors=$(jq '[.[] | .messages[] | select(.severity == 2)] | length' lint-results/eslint-report.json)
          fi

          # Process documentation lint results
          doc_issues=0
          if [ -f "lint-results/markdown-lint.json" ]; then
            doc_issues=$(jq length lint-results/markdown-lint.json)
          fi

          # Calculate totals
          total_issues=$((rust_issues + frontend_issues + doc_issues))
          total_errors=$((rust_errors + frontend_errors))

          echo "📈 Lint Summary:"
          echo "  🔧 Rust: $rust_issues issues ($rust_errors errors)"
          echo "  ⚛️  Frontend: $frontend_issues issues ($frontend_errors errors)"
          echo "  📚 Documentation: $doc_issues issues"
          echo "  📊 Total: $total_issues issues ($total_errors errors)"

          # Job status summary
          echo ""
          echo "🏃 Job Results:"
          echo "  🔒 Security Scan: ${{ needs.security-scan.result }}"
          echo "  🦀 Rust Lint: ${{ needs.rust-lint.result }}"
          echo "  ⚛️  Frontend Lint: ${{ needs.frontend-lint.result }}"
          echo "  📚 Documentation Lint: ${{ needs.documentation-lint.result }}"

      - name: Quality gate validation
        run: |
          echo "🚦 Running quality gate validation..."

          # Check if any jobs failed
          if [ "${{ needs.security-scan.result }}" = "failure" ] || \
             [ "${{ needs.rust-lint.result }}" = "failure" ] || \
             [ "${{ needs.frontend-lint.result }}" = "failure" ] || \
             [ "${{ needs.documentation-lint.result }}" = "failure" ]; then
            echo "❌ Quality gate failed: One or more lint jobs failed"
            exit 1
          fi

          echo "✅ Quality gate passed: All lint jobs successful"
