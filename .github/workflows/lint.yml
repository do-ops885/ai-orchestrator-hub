name: Lint and Format Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend-lint:
    name: Frontend ESLint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check

      - name: Check TypeScript
        run: npx tsc --noEmit

  backend-lint:
    name: Backend Clippy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy (basic features)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Clippy (advanced neural features)
        run: cargo clippy --all-targets --features advanced-neural -- -D warnings

      - name: Check documentation
        run: cargo doc --no-deps --document-private-items

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-lint, backend-lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Test backend
        working-directory: ./backend
        run: cargo test --all-features

      - name: Test backend examples
        working-directory: ./backend
        run: |
          cargo run --example neural_comparison --features advanced-neural
          cargo run --example advanced_neural_test --features advanced-neural
