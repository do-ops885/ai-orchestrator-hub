name: Build and Test

on:
  push:
    branches: [ main, develop, workflow-test ]
  pull_request:
    branches: [ main, develop, workflow-test ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
   # Fast feedback job - runs first
   pre-check:
     name: Pre-flight Checks
     runs-on: ubuntu-latest
     timeout-minutes: 5
     permissions:
       contents: read
     outputs:
       rust-changed: ${{ steps.filter.outputs.rust }}
       frontend-changed: ${{ steps.filter.outputs.frontend }}

    steps:
       - name: Checkout code
         uses: actions/checkout@v4
         with:
           fetch-depth: 0

       - name: Check for file changes
         id: filter
         run: |
           # Check for Rust changes
           if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^(backend/|Cargo\.toml|Cargo\.lock)'; then
             echo "rust=true" >> $GITHUB_OUTPUT
           else
             echo "rust=false" >> $GITHUB_OUTPUT
           fi

           # Check for frontend changes
           if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^(frontend/|package\.json|package-lock\.json)'; then
             echo "frontend=true" >> $GITHUB_OUTPUT
           else
             echo "frontend=false" >> $GITHUB_OUTPUT
           fi

      - name: Log change detection results
        run: |
          echo "Change detection completed:"
          echo "  Rust changes: ${{ steps.filter.outputs.rust }}"
          echo "  Frontend changes: ${{ steps.filter.outputs.frontend }}"

   # Rust build job
   rust-build:
     name: Rust Build (${{ matrix.target }})
     runs-on: ${{ matrix.runner }}
     needs: pre-check
     if: needs.pre-check.outputs.rust-changed == 'true'
     timeout-minutes: 45
     permissions:
       contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: x86_64-apple-darwin
            runner: macos-latest
          - target: aarch64-apple-darwin
            runner: macos-latest

    steps:
       - name: Checkout code
         uses: actions/checkout@v4

       - name: Setup Rust
         uses: dtolnay/rust-toolchain@stable
         with:
           targets: ${{ matrix.target }}

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: backend/target/
          key: ${{ runner.os }}-cargo-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock', 'backend/src/**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-${{ matrix.target }}-
            ${{ runner.os }}-cargo-target-

      - name: Install cross-compilation tools
        if: matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          echo "::group::Installing cross-compilation tools for ${{ matrix.target }}"
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
          echo "::endgroup::"

       - name: Build release binary
         run: |
           echo "::group::Building release binary for ${{ matrix.target }}"
           cd backend
           cargo build --release --all-features --target ${{ matrix.target }}
           echo "::endgroup::"

       - name: Install cargo-llvm-cov
         run: |
           echo "::group::Installing cargo-llvm-cov"
           cd backend
           cargo install cargo-llvm-cov --version 0.6.9
           echo "::endgroup::"

       - name: Run tests with coverage
         run: |
           echo "::group::Running tests with coverage for ${{ matrix.target }}"
           cd backend

           # Run tests with coverage
           cargo llvm-cov --all-features --release --lcov --output-path coverage-${{ matrix.target }}.lcov
           echo "::endgroup::"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-binary-${{ matrix.target }}
          path: backend/target/${{ matrix.target }}/release/multiagent-hive${{ contains(matrix.target, 'windows') && '.exe' || '' }}
            retention-days: 30

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-coverage-${{ matrix.target }}
          path: backend/coverage-${{ matrix.target }}.lcov
          retention-days: 30

   # Frontend build job
   frontend-build:
     name: Frontend Build
     runs-on: ubuntu-latest
     needs: pre-check
     if: needs.pre-check.outputs.frontend-changed == 'true'
     timeout-minutes: 20
     permissions:
       contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

       - name: Setup Node.js
         uses: actions/setup-node@v4
         with:
           node-version: '20'
           cache: 'npm'
           cache-dependency-path: frontend/package-lock.json

       - name: Cache Next.js build
         uses: actions/cache@v4
         with:
           path: |
             frontend/.next/cache/
             frontend/node_modules/.cache/
           key: ${{ runner.os }}-nextjs-${{ hashFiles('frontend/package-lock.json', 'frontend/**/*.ts', 'frontend/**/*.tsx') }}
           restore-keys: |
             ${{ runner.os }}-nextjs-${{ hashFiles('frontend/package-lock.json') }}
             ${{ runner.os }}-nextjs-

       - name: Install dependencies
         run: |
           echo "::group::Installing frontend dependencies"
           cd frontend
           npm ci
           echo "::endgroup::"

      - name: Run linting
        run: |
          echo "::group::Running frontend linting"
          cd frontend
          npm run lint
          echo "::endgroup::"

      - name: Run tests
        run: |
          echo "::group::Running frontend tests"
          cd frontend
          npm run test:coverage
          echo "::endgroup::"

      - name: Build frontend
        run: |
          echo "::group::Building frontend"
          cd frontend
          npm run build
          echo "::endgroup::"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/
          retention-days: 30

   # Integration tests
   integration-test:
     name: Integration Tests
     runs-on: ubuntu-latest
     needs: [rust-build, frontend-build]
     if: always() && (needs.rust-build.result == 'success' || needs.frontend-build.result == 'success')
     timeout-minutes: 30
     permissions:
       contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-build*"
          merge-multiple: true

      - name: Run integration tests
        run: |
          echo "::group::Running integration tests"
          if [ -f "scripts/integration_tests.sh" ]; then
            ./scripts/integration_tests.sh
          else
            echo "No integration test script found"
          fi
          echo "::endgroup::"

    # Build summary with performance metrics
    build-summary:
      name: Build Summary & Performance
      runs-on: ubuntu-latest
      needs: [pre-check, rust-build, frontend-build, integration-test]
      if: always()
      permissions:
        contents: read

     steps:
       - name: Checkout code
         uses: actions/checkout@v4

       - name: Generate build summary with performance metrics
         run: |
           echo "## 📊 Build Performance Summary" >> $GITHUB_STEP_SUMMARY
           echo "" >> $GITHUB_STEP_SUMMARY
           echo "| Component | Status | Changes Detected |" >> $GITHUB_STEP_SUMMARY
           echo "|-----------|--------|------------------|" >> $GITHUB_STEP_SUMMARY
           echo "| 🔍 Pre-check | ${{ needs.pre-check.result }} | N/A |" >> $GITHUB_STEP_SUMMARY
           echo "| 🦀 Rust Build | ${{ needs.rust-build.result }} | ${{ needs.pre-check.outputs.rust-changed }} |" >> $GITHUB_STEP_SUMMARY
           echo "| ⚛️ Frontend Build | ${{ needs.frontend-build.result }} | ${{ needs.pre-check.outputs.frontend-changed }} |" >> $GITHUB_STEP_SUMMARY
           echo "| 🔗 Integration Tests | ${{ needs.integration-test.result }} | N/A |" >> $GITHUB_STEP_SUMMARY
           echo "" >> $GITHUB_STEP_SUMMARY

           # Performance insights
           echo "### 💡 Performance Insights" >> $GITHUB_STEP_SUMMARY
           echo "" >> $GITHUB_STEP_SUMMARY

           if [[ "${{ needs.pre-check.outputs.rust-changed }}" == "false" ]]; then
             echo "✅ **Rust build skipped** - No Rust code changes detected" >> $GITHUB_STEP_SUMMARY
           fi

           if [[ "${{ needs.pre-check.outputs.frontend-changed }}" == "false" ]]; then
             echo "✅ **Frontend build skipped** - No frontend code changes detected" >> $GITHUB_STEP_SUMMARY
           fi

           # Cache hit information
           echo "" >> $GITHUB_STEP_SUMMARY
           echo "### 📈 Cache Performance" >> $GITHUB_STEP_SUMMARY
           echo "- **Cargo Registry**: Cached for faster dependency downloads" >> $GITHUB_STEP_SUMMARY
           echo "- **Rust Target**: Cached for incremental builds" >> $GITHUB_STEP_SUMMARY
           echo "- **Node.js Modules**: Cached for faster npm installs" >> $GITHUB_STEP_SUMMARY
           echo "- **Next.js Cache**: Cached for faster frontend builds" >> $GITHUB_STEP_SUMMARY

           # Determine overall status
           if [[ "${{ needs.rust-build.result }}" == "success" || "${{ needs.rust-build.result }}" == "skipped" ]] && \
              [[ "${{ needs.frontend-build.result }}" == "success" || "${{ needs.frontend-build.result }}" == "skipped" ]] && \
              [[ "${{ needs.integration-test.result }}" == "success" || "${{ needs.integration-test.result }}" == "skipped" ]]; then
             echo "" >> $GITHUB_STEP_SUMMARY
             echo "✅ **Build workflow completed successfully!**" >> $GITHUB_STEP_SUMMARY
             exit 0
           else
             echo "" >> $GITHUB_STEP_SUMMARY
             echo "❌ **Build workflow failed!** Check the logs for details." >> $GITHUB_STEP_SUMMARY
             exit 1
           fi
