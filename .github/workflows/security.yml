---
name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    # Run weekly security scans
    - cron: '0 3 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Security audit - optimized
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 12
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry/
          key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo audit
        run: |
          cd backend
          cargo install cargo-audit --version ^0.18 || echo "Failed to install cargo-audit"
          cargo audit --format json --output audit.json || {
          echo "::warning::Security vulnerabilities found in cargo audit"
          exit 1
          }

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/audit.json
          retention-days: 7

  # Frontend security scanning
  frontend-security:
    name: Frontend Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: ${{ runner.os }}-node-security-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --no-audit

      - name: Run npm audit
        run: |
          echo "Running npm audit"
          cd frontend
          npm audit --audit-level moderate --json > audit-results.json || {
          echo "::warning::NPM security issues found"
          exit 1
          }
          continue-on-error: true

      - name: Check for vulnerable dependencies
        run: |
          echo "Running audit-ci check"
          cd frontend
          npx audit-ci --config audit-ci.json || {
          echo "::warning::Vulnerable dependencies detected"
          exit 1
          }
          continue-on-error: true

      - name: Upload frontend security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-security-reports
          path: frontend/audit-results.json
          retention-days: 30

  # CodeQL security analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, rust
          config-file: ./.github/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
          upload: true

      - name: Perform CodeQL Analysis (Rust)
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:rust"
          upload: true

  # Dependency review for PRs
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          config-file: ./.github/dependency-review-config.yml

  # Container security scanning (if using containers)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(join(github.event.head_commit.modified, ','), 'Dockerfile')
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build container
        run: |
          echo "Building container for security scan"
          docker build -t multiagent-hive:latest .

      - name: Scan container
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: 'image'
          scan-ref: 'multiagent-hive:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

   # Secrets scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup structured logging
        uses: ./.github/actions/setup-logging
        with:
          correlation-id: ${{ github.run_id }}-${{ github.run_attempt }}

      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

      - name: Cleanup logging
        if: always()
        uses: ./.github/actions/cleanup-logging
        with:
          final-status: ${{ job.status }}

  # Security metrics collection
  security-metrics:
    name: Security Metrics Collection
    runs-on: ubuntu-latest
    needs: [security-audit, frontend-security, codeql-analysis, dependency-review, container-scan, secrets-scan]
    if: always()
    timeout-minutes: 10
    permissions:
      contents: read

    steps:
      - name: Setup structured logging
        uses: ./.github/actions/setup-logging
        with:
          correlation-id: ${{ github.run_id }}-${{ github.run_attempt }}

      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports/

      - name: Process security metrics
        run: |
           source log_helper.sh
           log_structured "INFO" "Processing security metrics"

           # Initialize metrics
           rust_vulnerabilities=0
           npm_vulnerabilities=0
           codeql_alerts=0
           secrets_found=0
           container_vulns=0

           # Parse cargo audit results
           if [-f "security-reports/security-reports/backend/audit.json"]; then
             rust_vulnerabilities=$(jq '.vulnerabilities.count' security-reports/security-reports/backend/audit.json 2>/dev/null || echo "0")
           fi

           # Parse npm audit results
           if [-f "security-reports/frontend-security-reports/frontend/audit-results.json"]; then
             npm_vulnerabilities=$(jq '.metadata.vulnerabilities.total' security-reports/frontend-security-reports/frontend/audit-results.json 2>/dev/null || echo "0")
           fi

           # Count CodeQL results (would need to parse SARIF files)
           codeql_alerts="N/A"  # Placeholder - would parse SARIF

           # Count secrets
           if [-f "security-reports/security-scan-results/gitleaks-report.json"]; then
             secrets_found=$(jq length security-reports/security-scan-results/gitleaks-report.json 2>/dev/null || echo "0")
           fi

           # Count container vulnerabilities
           if [-f "trivy-results.sarif"]; then
             container_vulns=$(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "0")
           fi

           # Generate security metrics report
           echo "## 🔒 Security Metrics" >> $GITHUB_STEP_SUMMARY
           echo "" >> $GITHUB_STEP_SUMMARY
           echo "| Metric | Count | Threshold | Status |" >> $GITHUB_STEP_SUMMARY
           echo "|--------|-------|-----------|--------|" >> $GITHUB_STEP_SUMMARY

           # Rust vulnerabilities
           if ["$rust_vulnerabilities" -gt 0]; then
             echo "| 🦀 Rust Vulnerabilities | $rust_vulnerabilities | 0 | ❌ |" >> $GITHUB_STEP_SUMMARY
           else
             echo "| 🦀 Rust Vulnerabilities | $rust_vulnerabilities | 0 | ✅ |" >> $GITHUB_STEP_SUMMARY
           fi

           # NPM vulnerabilities
           if ["$npm_vulnerabilities" -gt 0]; then
             echo "| 📦 NPM Vulnerabilities | $npm_vulnerabilities | 0 | ❌ |" >> $GITHUB_STEP_SUMMARY
           else
             echo "| 📦 NPM Vulnerabilities | $npm_vulnerabilities | 0 | ✅ |" >> $GITHUB_STEP_SUMMARY
           fi

           # CodeQL alerts
           echo "| 🔍 CodeQL Alerts | $codeql_alerts | 0 | ⚠️ |" >> $GITHUB_STEP_SUMMARY

           # Secrets found
           if ["$secrets_found" -gt 0]; then
             echo "| 🔐 Secrets Detected | $secrets_found | 0 | ❌ |" >> $GITHUB_STEP_SUMMARY
           else
             echo "| 🔐 Secrets Detected | $secrets_found | 0 | ✅ |" >> $GITHUB_STEP_SUMMARY
           fi

           # Container vulnerabilities
           if ["$container_vulns" -gt 0]; then
             echo "| 🐳 Container Vulns | $container_vulns | 0 | ❌ |" >> $GITHUB_STEP_SUMMARY
           else
             echo "| 🐳 Container Vulns | $container_vulns | 0 | ✅ |" >> $GITHUB_STEP_SUMMARY
           fi

      - name: Store security metrics for trend analysis
        run: |
          mkdir -p security-metrics-history
          timestamp=$(date +%Y%m%d_%H%M%S)
          cat > security-metrics-history/security_metrics_$timestamp.json << EOF
          {
           "timestamp": "$(date -Iseconds)",
           "run_id": "${{ github.run_id }}",
           "vulnerabilities": {
          "rust": $rust_vulnerabilities,
          "npm": $npm_vulnerabilities,
          "container": $container_vulns
           },
           "alerts": {
          "codeql": "$codeql_alerts",
          "secrets": $secrets_found
           }
          }
          EOF

      - name: Upload security metrics
        uses: actions/upload-artifact@v4
        with:
          name: security-metrics-history
          path: security-metrics-history/
          retention-days: 90

      - name: Cleanup logging
        if: always()
        uses: ./.github/actions/cleanup-logging
        with:
          final-status: ${{ job.status }}

  # Security trend analysis
  security-trends:
    name: Security Trend Analysis
    runs-on: ubuntu-latest
    needs: [security-metrics]
    if: always()
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - name: Setup structured logging
        uses: ./.github/actions/setup-logging
        with:
          correlation-id: ${{ github.run_id }}-${{ github.run_attempt }}

      - name: Download security metrics history
        uses: actions/download-artifact@v4
        with:
          pattern: "security-metrics-history*"
          merge-multiple: true

      - name: Analyze security trends
        run: |
          source log_helper.sh
          log_structured "INFO" "Analyzing security trends"

          echo "## 📈 Security Trends" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count historical metrics files
          metrics_files=$(find . -name "security_metrics_*.json" | wc -l)

          if ["$metrics_files" -gt 1]; then
           echo "📊 **Historical Analysis**: $metrics_files data points available" >> $GITHUB_STEP_SUMMARY

           # Simple trend analysis (in production, use more sophisticated analysis)
           latest_file=$(find . -name "security_metrics_*.json" -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)
           previous_file=$(find . -name "security_metrics_*.json" -printf '%T@ %p\n' | sort -n | tail -2 | head -1 | cut -d' ' -f2-)

           if [-f "$latest_file"] && [-f "$previous_file"]; then
          latest_rust=$(jq '.vulnerabilities.rust' "$latest_file" 2>/dev/null || echo "0")
          previous_rust=$(jq '.vulnerabilities.rust' "$previous_file" 2>/dev/null || echo "0")

          if ["$latest_rust" -gt "$previous_rust"]; then
           echo "📈 **Rust Vulnerabilities**: Increased from $previous_rust to $latest_rust" >> $GITHUB_STEP_SUMMARY
          elif ["$latest_rust" -lt "$previous_rust"]; then
           echo "📉 **Rust Vulnerabilities**: Decreased from $previous_rust to $latest_rust" >> $GITHUB_STEP_SUMMARY
          else
           echo "➡️ **Rust Vulnerabilities**: Stable at $latest_rust" >> $GITHUB_STEP_SUMMARY
          fi
           fi
          else
           echo "📊 **Historical Analysis**: Insufficient data for trend analysis" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup logging
        if: always()
        uses: ./.github/actions/cleanup-logging
        with:
          final-status: ${{ job.status }}

  # Security reports compliance validation
  security-reports-validation:
    name: Security Reports Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup structured logging
        uses: ./.github/actions/setup-logging
        with:
          correlation-id: ${{ github.run_id }}-${{ github.run_attempt }}

      - name: Validate security reports compliance
        run: |
          source log_helper.sh
          log_structured "INFO" "Running security reports compliance validation"

          # Run the comprehensive validation script
          ./scripts/validate-security-reports-compliance.sh

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-compliance
          path: security-reports/compliance-report-*.json
          retention-days: 30

      - name: Cleanup logging
        if: always()
        uses: ./.github/actions/cleanup-logging
        with:
          final-status: ${{ job.status }}

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-audit, frontend-security, codeql-analysis, dependency-review, container-scan, secrets-scan, security-metrics, security-trends, security-reports-validation]
    if: always()
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - name: Setup structured logging
        uses: ./.github/actions/setup-logging
        with:
          correlation-id: ${{ github.run_id }}-${{ github.run_attempt }}

      - name: Generate comprehensive security summary
        run: |
          source log_helper.sh
          log_structured "INFO" "Generating comprehensive security summary"

          echo "## 🔒 Comprehensive Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🦀 Rust Audit | ${{ needs.security-audit.result }} | Cargo security vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Frontend Security | ${{ needs.frontend-security.result }} | NPM audit and dependency checks |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 CodeQL Analysis | ${{ needs.codeql-analysis.result }} | Static analysis for JS/Rust |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 Dependency Review | ${{ needs.dependency-review.result }} | License and vulnerability checks |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Container Scan | ${{ needs.container-scan.result }} | Docker image security |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔐 Secrets Scan | ${{ needs.secrets-scan.result }} | Leaked secrets detection |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Security Metrics | ${{ needs.security-metrics.result }} | Vulnerability tracking |" >> $GITHUB_STEP_SUMMARY
          echo "| 📈 Security Trends | ${{ needs.security-trends.result }} | Historical analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 Reports Compliance | ${{ needs.security-reports-validation.result }} | Security reports organization |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Critical security gate validation
          critical_failures=0
           if [["${{ needs.security-audit.result }}" == "failure"]]; then
          critical_failures=$((critical_failures + 1))
           fi
           if [["${{ needs.frontend-security.result }}" == "failure"]]; then
          critical_failures=$((critical_failures + 1))
           fi
           if [["${{ needs.secrets-scan.result }}" == "failure"]]; then
          critical_failures=$((critical_failures + 1))
           fi
           if [["${{ needs.security-reports-validation.result }}" == "failure"]]; then
          critical_failures=$((critical_failures + 1))
          fi

          if [$critical_failures -gt 0]; then
          log_structured "ERROR" "Critical security issues detected"
          echo "🚨 **Critical security issues detected!** Immediate attention required." >> $GITHUB_STEP_SUMMARY
          exit 1
          else
          log_structured "INFO" "All critical security checks passed"
          echo "✅ **All critical security checks passed!**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup logging
        if: always()
        uses: ./.github/actions/cleanup-logging
        with:
          final-status: ${{ job.status }}
