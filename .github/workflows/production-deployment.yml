name: Production Deployment (Blue-Green)

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        type: boolean
        default: false
      rollback_version:
        description: 'Specific version to rollback to (leave empty for latest)'
        required: false
        type: string

concurrency:
  group: production-deployment-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}/backend
  FRONTEND_IMAGE: ${{ github.repository }}/frontend
  DEPLOYMENT_START_TIME: ${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}

jobs:
  # Pre-deployment validation
  pre-deployment-validation:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit_sha: ${{ steps.version.outputs.commit_sha }}
      should_deploy: ${{ steps.validation.outputs.should_deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and commit
        id: version
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          VERSION=$(git describe --tags --always --dirty)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/
            ~/.npm
            backend/target/
            frontend/node_modules
          key: ${{ runner.os }}-deploy-${{ hashFiles('**/Cargo.lock', 'frontend/package-lock.json') }}

      - name: Validate builds
        run: |
          cd backend
          cargo check --all-features
          cd ../frontend
          npm run build

      - name: Run critical tests
        run: |
          cd backend
          cargo test --all-features --release --lib --bins -- --nocapture
          cd ../frontend
          npm run test:ci

      - name: Security scan
        uses: github/super-linter/slim@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_RUST_CLIPPY: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true

      - name: Deployment validation
        id: validation
        run: |
          # Check if this is a force deploy or if all validations passed
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "🚨 Force deployment enabled - proceeding with caution"
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ All validations passed"
          fi

  # Build and push Docker images
  build-and-push-images:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.should_deploy == 'true'
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging first (canary deployment)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build-and-push-images]
    if: needs.pre-deployment-validation.outputs.should_deploy == 'true' && github.event.inputs.environment != 'production'
    timeout-minutes: 20
    environment: staging
    outputs:
      staging_url: ${{ steps.deploy.outputs.staging_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (if using AWS)
        uses: aws-actions/configure-aws-credentials@v4
        if: env.AWS_REGION
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to staging
        id: deploy
        run: |
          echo "🚀 Deploying to staging environment..."
          
          # This is a placeholder - replace with your actual deployment commands
          # Examples for different platforms:
          
          # AWS ECS Example:
          # aws ecs update-service --cluster ai-orchestrator-staging --service ai-orchestrator-service --force-new-deployment
          
          # Kubernetes Example:
          # kubectl set image deployment/ai-orchestrator-backend ai-orchestrator-backend=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          # kubectl set image deployment/ai-orchestrator-frontend ai-orchestrator-frontend=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          # kubectl rollout status deployment/ai-orchestrator-backend
          # kubectl rollout status deployment/ai-orchestrator-frontend
          
          # Docker Compose Example:
          # docker-compose -f docker-compose.staging.yml pull
          # docker-compose -f docker-compose.staging.yml up -d
          
          STAGING_URL="https://staging.ai-orchestrator-hub.com"
          echo "staging_url=$STAGING_URL" >> $GITHUB_OUTPUT
          echo "✅ Staging deployment completed"

      - name: Health check staging
        run: |
          echo "🔍 Running health checks on staging..."
          
          # Wait for deployment to be ready
          for i in {1..30}; do
            if curl -f -s "${{ steps.deploy.outputs.staging_url }}/health" > /dev/null; then
              echo "✅ Staging health check passed"
              break
            fi
            echo "Waiting for staging to be healthy... ($i/30)"
            sleep 10
          done
          
          if [[ $i -eq 30 ]]; then
            echo "❌ Staging health check failed"
            exit 1
          fi

      - name: Run staging smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          
          # Basic smoke tests
          curl -f "${{ steps.deploy.outputs.staging_url }}/api/health"
          curl -f "${{ steps.deploy.outputs.staging_url }}/api/agents"
          
          echo "✅ Staging smoke tests passed"

  # Blue-Green deployment to production
  blue-green-deployment:
    name: Blue-Green Production Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build-and-push-images, deploy-staging]
    if: needs.pre-deployment-validation.outputs.should_deploy == 'true' && (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production')
    timeout-minutes: 45
    environment: production
    outputs:
      active_environment: ${{ steps.deployment.outputs.active_environment }}
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine blue/green target
        id: target
        run: |
          # Determine which environment is currently active
          # This is a placeholder - replace with your actual logic
          
          # Example: Check current active environment via API or config
          CURRENT_ACTIVE="blue"  # This should be determined dynamically
          
          if [[ "$CURRENT_ACTIVE" == "blue" ]]; then
            TARGET_ENV="green"
          else
            TARGET_ENV="blue"
          fi
          
          echo "current_active=$CURRENT_ACTIVE" >> $GITHUB_OUTPUT
          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT

      - name: Deploy to inactive environment
        id: deployment
        run: |
          TARGET_ENV="${{ steps.target.outputs.target_environment }}"
          DEPLOYMENT_ID="deploy-$(date +%Y%m%d-%H%M%S)"
          
          echo "🚀 Deploying to $TARGET_ENV environment..."
          echo "📋 Deployment ID: $DEPLOYMENT_ID"
          
          # Deploy to the inactive environment
          # Replace with your actual deployment commands
          
          # Example for AWS ECS:
          # aws ecs update-service --cluster ai-orchestrator-prod --service ai-orchestrator-service-$TARGET_ENV --force-new-deployment
          
          # Example for Kubernetes:
          # kubectl set image deployment/ai-orchestrator-backend-$TARGET_ENV ai-orchestrator-backend=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          # kubectl set image deployment/ai-orchestrator-frontend-$TARGET_ENV ai-orchestrator-frontend=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          
          echo "active_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      - name: Health check inactive environment
        run: |
          TARGET_ENV="${{ steps.target.outputs.target_environment }}"
          echo "🔍 Running health checks on $TARGET_ENV environment..."
          
          # Health check the newly deployed environment
          for i in {1..30}; do
            # Replace with your actual health check endpoint
            if curl -f -s "https://$TARGET_ENV.ai-orchestrator-hub.com/health" > /dev/null; then
              echo "✅ $TARGET_ENV environment health check passed"
              break
            fi
            echo "Waiting for $TARGET_ENV environment to be healthy... ($i/30)"
            sleep 10
          done
          
          if [[ $i -eq 30 ]]; then
            echo "❌ $TARGET_ENV environment health check failed"
            exit 1
          fi

      - name: Run smoke tests on inactive environment
        run: |
          TARGET_ENV="${{ steps.target.outputs.target_environment }}"
          echo "🧪 Running smoke tests on $TARGET_ENV environment..."
          
          # Comprehensive smoke tests
          curl -f "https://$TARGET_ENV.ai-orchestrator-hub.com/api/health"
          curl -f "https://$TARGET_ENV.ai-orchestrator-hub.com/api/agents"
          curl -f "https://$TARGET_ENV.ai-orchestrator-hub.com/api/tasks"
          
          echo "✅ $TARGET_ENV environment smoke tests passed"

      - name: Gradual traffic shifting
        id: traffic
        run: |
          TARGET_ENV="${{ steps.target.outputs.target_environment }}"
          CURRENT_ACTIVE="${{ steps.target.outputs.current_active }}"
          
          echo "🚦 Starting gradual traffic shifting from $CURRENT_ACTIVE to $TARGET_ENV..."
          
          # Implement gradual traffic shifting
          # This is a placeholder - replace with your load balancer configuration
          
          # Example: AWS ALB weighted routing
          # aws elbv2 modify-listener --listener-arn $LISTENER_ARN \
          #   --default-actions '[
          #     {
          #       "Type": "forward",
          #       "Order": 1,
          #       "ForwardConfig": {
          #         "TargetGroups": [
          #           {"TargetGroupArn": "'$CURRENT_ACTIVE_TG_ARN'", "Weight": 90},
          #           {"TargetGroupArn": "'$TARGET_TG_ARN'", "Weight": 10}
          #         ]
          #       }
          #     }
          #   ]'
          
          # Simulate gradual shifting
          for percentage in 10 25 50 75 100; do
            echo "📊 Shifting $percentage% traffic to $TARGET_ENV..."
            
            # Wait and monitor
            sleep 30
            
            # Check for errors during traffic shift
            if curl -f -s "https://$TARGET_ENV.ai-orchestrator-hub.com/health" > /dev/null; then
              echo "✅ Traffic shift to $percentage% successful"
            else
              echo "❌ Health check failed during traffic shift"
              exit 1
            fi
          done
          
          echo "✅ Traffic shifting completed successfully"

      - name: Finalize deployment
        run: |
          TARGET_ENV="${{ steps.target.outputs.target_environment }}"
          echo "🎉 Deployment to $TARGET_ENV completed successfully"
          echo "🔄 Traffic fully shifted to $TARGET_ENV"

  # Comprehensive monitoring and alerting
  monitoring-and-alerting:
    name: Monitoring & Alerting
    runs-on: ubuntu-latest
    needs: blue-green-deployment
    if: always()
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup monitoring
        run: |
          echo "📊 Setting up deployment monitoring..."
          
          # Send deployment metrics to monitoring system
          DEPLOYMENT_STATUS="${{ needs.blue-green-deployment.result }}"
          ACTIVE_ENV="${{ needs.blue-green-deployment.outputs.active_environment }}"
          DEPLOYMENT_ID="${{ needs.blue-green-deployment.outputs.deployment_id }}"
          
          # Example: Send to DataDog, New Relic, or custom monitoring
          echo "Deployment Status: $DEPLOYMENT_STATUS"
          echo "Active Environment: $ACTIVE_ENV"
          echo "Deployment ID: $DEPLOYMENT_ID"

      - name: Performance monitoring
        run: |
          echo "⚡ Running performance checks..."
          
          # Monitor key performance metrics
          # Replace with your actual monitoring commands
          
          # Example: Check response times, error rates, etc.
          echo "✅ Performance monitoring completed"

      - name: Alert on deployment issues
        if: needs.blue-green-deployment.result == 'failure'
        run: |
          echo "🚨 Deployment failed! Sending alerts..."
          
          # Send alerts to team
          # Example: Slack notification, email, PagerDuty, etc.
          
          echo "Alert sent to team about deployment failure"

      - name: Success notification
        if: needs.blue-green-deployment.result == 'success'
        run: |
          echo "🎉 Deployment successful! Sending notifications..."
          
          # Send success notifications
          echo "Success notification sent to team"

  # Rollback capability
  rollback-preparation:
    name: Rollback Preparation
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, blue-green-deployment]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Prepare rollback plan
        run: |
          echo "🔄 Preparing rollback capabilities..."
          
          DEPLOYMENT_STATUS="${{ needs.blue-green-deployment.result }}"
          ACTIVE_ENV="${{ needs.blue-green-deployment.outputs.active_environment }}"
          PREVIOUS_ENV="${{ steps.target.outputs.current_active }}"
          
          if [[ "$DEPLOYMENT_STATUS" == "failure" ]]; then
            echo "❌ Deployment failed - rollback recommended"
            echo "Rollback Plan:"
            echo "1. Switch traffic back to $PREVIOUS_ENV"
            echo "2. Scale down $ACTIVE_ENV"
            echo "3. Investigate failure causes"
          else
            echo "✅ Deployment successful - rollback on standby"
            echo "Rollback Plan (if needed):"
            echo "1. Switch traffic back to $PREVIOUS_ENV"
            echo "2. Keep $ACTIVE_ENV running for investigation"
          fi

      - name: Create rollback script
        run: |
          cat > rollback-script.sh << EOF
          #!/bin/bash
          # Rollback script for AI Orchestrator Hub
          # Generated on $(date)
          
          echo "Starting rollback process..."
          
          # Switch traffic back to previous environment
          # Replace with your actual rollback commands
          
          # Example for AWS:
          # aws elbv2 modify-listener --listener-arn \$LISTENER_ARN \\
          #   --default-actions '[{"Type": "forward", "TargetGroupArn": "\$PREVIOUS_TG_ARN"}]'
          
          # Example for Kubernetes:
          # kubectl scale deployment ai-orchestrator-backend-\$ACTIVE_ENV --replicas=0
          # kubectl scale deployment ai-orchestrator-frontend-\$ACTIVE_ENV --replicas=0
          
          echo "Rollback completed"
          EOF
          
          chmod +x rollback-script.sh

  # Post-deployment validation
  post-deployment-validation:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: blue-green-deployment
    if: needs.blue-green-deployment.result == 'success'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: End-to-end testing
        run: |
          echo "🧪 Running end-to-end tests on production..."
          
          # Run comprehensive E2E tests
          # Replace with your actual test commands
          
          echo "✅ E2E tests passed"

      - name: Load testing
        run: |
          echo "🔥 Running load tests..."
          
          # Run load tests to ensure performance
          # Replace with your actual load testing commands
          
          echo "✅ Load tests passed"

      - name: Security validation
        run: |
          echo "🔒 Running security validation..."
          
          # Run security checks on production
          # Replace with your actual security validation
          
          echo "✅ Security validation passed"

  # Deployment summary and reporting
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, blue-green-deployment, monitoring-and-alerting, post-deployment-validation]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Generate deployment report
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** ${{ env.DEPLOYMENT_START_TIME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.pre-deployment-validation.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ needs.pre-deployment-validation.outputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pre-deployment validation: ${{ needs.pre-deployment-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Image build & push: ${{ needs.build-and-push-images.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Blue-green deployment: ${{ needs.blue-green-deployment.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Monitoring & alerting: ${{ needs.monitoring-and-alerting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Post-deployment validation: ${{ needs.post-deployment-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.blue-green-deployment.result }}" == "success" ]]; then
            echo "### Active Environment" >> $GITHUB_STEP_SUMMARY
            echo "- 🌐 **${{ needs.blue-green-deployment.outputs.active_environment }}** is now active" >> $GITHUB_STEP_SUMMARY
            echo "- 📋 Deployment ID: ${{ needs.blue-green-deployment.outputs.deployment_id }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed!** Check the logs above for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Rollback Instructions" >> $GITHUB_STEP_SUMMARY
            echo "1. Review failure logs" >> $GITHUB_STEP_SUMMARY
            echo "2. Execute rollback script if needed" >> $GITHUB_STEP_SUMMARY
            echo "3. Investigate root cause" >> $GITHUB_STEP_SUMMARY
            echo "4. Fix issues and redeploy" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Archive deployment artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ github.run_id }}
          path: |
            rollback-script.sh
          retention-days: 30
