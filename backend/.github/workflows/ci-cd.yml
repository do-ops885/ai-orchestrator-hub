name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.75

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev sqlite3 libsqlite3-dev

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-features --verbose

    - name: Run security audit
      uses: actions-rs/audit@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev sqlite3 libsqlite3-dev

    - name: Build release
      run: cargo build --release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ai-orchestrator-binary
        path: target/release/multiagent-hive

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ai-orchestrator-binary
        path: target/release/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/ai-orchestrator-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kube config
      run: aws eks update-kubeconfig --name ai-orchestrator-staging

    - name: Deploy to staging
      run: |
        helm upgrade --install ai-orchestrator-staging ./helm/ai-orchestrator \
          --namespace staging \
          --set image.tag=${{ github.sha }} \
          --set ingress.hosts[0].host=api-staging.your-domain.com \
          --wait

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kube config
      run: aws eks update-kubeconfig --name ai-orchestrator-prod

    - name: Deploy to production
      run: |
        helm upgrade --install ai-orchestrator-prod ./helm/ai-orchestrator \
          --namespace production \
          --set image.tag=${{ github.sha }} \
          --set ingress.hosts[0].host=api.your-domain.com \
          --wait

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run k6 performance tests
      uses: k6io/action@v0.1
      with:
        filename: tests/performance/k6-script.js
        flags: --out json=results.json
      env:
        K6_PROMETHEUS_RW_SERVER_URL: ${{ secrets.K6_PROMETHEUS_URL }}
        K6_PROMETHEUS_RW_USERNAME: ${{ secrets.K6_PROMETHEUS_USERNAME }}
        K6_PROMETHEUS_RW_PASSWORD: ${{ secrets.K6_PROMETHEUS_PASSWORD }}

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: results.json